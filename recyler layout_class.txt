package com.example.recycleview;


import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import androidx.recyclerview.widget.RecyclerView;

public class CustomAdapter extends RecyclerView.Adapter<CustomAdapter.ViewHolder> {

    private String[] localDataSet;
    // to store the the value which we are enterd from main activity through the constructor


    public static class ViewHolder extends RecyclerView.ViewHolder {
        private final TextView textView;


       // step 1 : create the view holder class set the text id here and return the textview


        public ViewHolder(View view) {
            super(view);
            // Define click listener for the ViewHolder's View
            textView = (TextView) view.findViewById(R.id.textView4);
        }

        public TextView getTextView() {
            return textView;

        }
    }

    // create the constructor of the main class and get the string
    public CustomAdapter(String[] dataSet) {

        localDataSet = dataSet;
        //add the data into our main array
    }
     // step 3:
    // Create new views (invoked by the layout manager)
    //return the objects of the prevous class `ViewHolder` here and inflate the custom layout
    // and return the object view
    @Override
    public ViewHolder onCreateViewHolder(ViewGroup viewGroup, int viewType) {
        // Create a new view, which defines the UI of the list item
        View view = LayoutInflater.from(viewGroup.getContext())
                .inflate(R.layout.text_row_item, viewGroup, false);

        return new ViewHolder(view);

    }

    // Replace the contents of a view (invoked by the layout manager)

    // step 4: add the text here in text view
    @Override
    public void onBindViewHolder(ViewHolder viewHolder, final int position) {

        // Get element from your dataset at this position and replace the
        // contents of the view with that element
        viewHolder.getTextView().setText(localDataSet[position]);
    }

    // Return the size of your dataset (invoked by the layout manager)
    @Override
    public int getItemCount() {
        return localDataSet.length;
    }
}
